{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","console","log","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","datos","loading","state","setState","useEffect","then","imgs","useFetchGif","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OACI,cADM,CACN,QAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OAItCN,EAAc,MAKlB,UACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SApBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,UAkBvB,W,QCxBKG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,sBAAKC,UAAU,2CAAf,oBACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEfC,QAAQC,IAAIH,GACNL,EAHS,iDAGuCS,UAAUJ,GAHjD,+DAIIK,MAAMV,GAJV,cAITW,EAJS,gBAKMA,EAAKC,OALX,uBAKRC,EALQ,EAKRA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAG,UAACgB,EAAIE,cAAL,aAAC,EAAYC,iBAAiBnB,QAb1B,kBAiBRc,GAjBQ,4CAAH,sDCGPM,EAAU,SAAC,GAAgB,IAAff,EAAc,EAAdA,SAAc,ECAZ,SAACA,GAAc,IAAD,EAEXpB,mBAAU,CAACoC,MAAM,GAAIC,SAAS,IAFnB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAUrC,OALAC,qBAAU,WACNrB,EAAQC,GACHqB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CAACH,MAAOM,EAAML,SAAS,SACnD,CAACjB,IAEGkB,EDPyBK,CAAYvB,GAA9BwB,EAHqB,EAG5BR,MAAcC,EAHc,EAGdA,QAGrB,OACI,qCACI,6BAAKjB,IAEJiB,GAAW,0CAHhB,MAKI,qBAAKrB,UAAU,YAAf,SAEQ4B,EAAMd,KAAK,SAAAC,GACP,OAAO,cAAC,EAAD,eAEHA,GADCA,EAAIC,aEmBlBa,EAnCM,WAAM,MAIa7C,mBAAS,IAJtB,mBAIhB8C,EAJgB,KAIJ/C,EAJI,KAUvB,OACI,qCAEI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IALhC,QAOI,6BAOO+C,EAAWhB,KAAI,SAAAV,GAAQ,OAClB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCzBtC2B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.371d2aee.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'; \r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(\"\");    // tambien podemos poner un string vacio (\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);       \r\n        /* console.log(e.target.value) */\r\n       \r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){    // si la cadena no tiene mas de dos caracteres no permitimos la validacion\r\n            setCategories( cat => [inputValue, ...cat]);   // podriamos pasar las categorias, pero no es necesario, ya que el setCategories puede llamarse con un callback que guarda el \r\n        //console.log(\"Submit hecho\");                    estado anterior\r\n\r\n        /* setCategories( cat => [...cat, inputValue]);  el ejemplo de arriba inserta el elemento al principio, y esta linea lo inserta al final */\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (  // como solo devolvemos un elemento (el form) no es necesario usar los fragments\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}></input>    {/* onChange se activa cada vez que la caja de texto del input cambia */}\r\n        </form>                                  //  onChange={ (e) => handleInputChange(e)}  onChange recibe el evento y se lo pasa a otra funcion\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = { \r\n    setCategories: PropTypes.func.isRequired    // indicamos que la propiedad saludo de este componente debe ser un string y que es obligatorio especificar su valor.\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__backInUp\">       {/* class es una palabra reservada de react. Debemos usar className */}\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n"," \r\nexport const getGifs = async(category) => {\r\n        // encodeURI adapta el string al formato correcto de un direccion web: quita los espacios, cambia las tildes, etc\r\n        console.log(category)\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=43Chhx0oE0atkcYXYWN2ctHaDCQ9YB8O`;     \r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();    // desestructuramos los datos\r\n        \r\n        //console.log(data);\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url:img.images?.downsized_medium.url     // ? para asegurarnos que el elemento existe\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n        /* console.log(gifs);\r\n        setImage(gifs); */\r\n    }","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport {useFetchGif} from '../hooks/useFetchGif.js';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const estado = useFetchGif();   esto nos devuelve el objeto\r\n    const {datos: image, loading} = useFetchGif(category);   // esto nos devuelve el objeto desestructurado. Los nombres de las propiedades deben coincidir con los usados en el hook\r\n    // podemos renombrar las propiedades de un objeto desestructurado de la siguiente forma\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3> \r\n            \r\n            {loading && <h4>Cargando</h4>}   {/* si loading es true, se ejecuta esta linea e imprime el parrafo */}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    image.map( img => {\r\n                        return <GifGridItem  \r\n                        key={img.id}\r\n                        {...img} />           // img={img} Enviamos las propiedades de img como propiedades independientes\r\n                    })\r\n                    /*  image.map( img => {             // cuando no ponemos las llaves estamos realizando un return implicito\r\n                        return <li key={img.id}> {img.title}</li>\r\n                    }) */\r\n\r\n                    // lo mismo pero desectructurando\r\n                    /* image.map( ({id, title}) => {                  \r\n                        return <li key={id}> {title}</li>\r\n                    }) */\r\n                }              \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs.js'\r\n\r\n// exportamos la funcion que a su vez devuelve un objeto\r\nexport const useFetchGif = (category) => {\r\n\r\n    const [state, setState] = useState ({datos:[], loading: true});\r\n\r\n    // un effect se ejecuta la primera vez que carga la pagina o cada vez que el elemento indicado se actualiza\r\n    useEffect(() => { // los efectos no pueden ser una funcion asincrona\r\n        getGifs(category)      // esto es una promesa\r\n            .then(imgs => setState({datos: imgs, loading: false}));      // es lo mismo que .then(setImages)\r\n    }, [category]);   // vector de dependencias. Escribimos category por si el elemento varia y tenemos que volver a cargar la pagina\r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = [\"Juego de tronos\", \"Dragon Ball\", \"One Piece\"];\r\n\r\n    const [categories, setCategories] = useState([]);\r\n    \r\n    /* const handleAdd = () => {\r\n        setCategories(cat => [...categories, \"Cazafantasmas\"]);  //asi a√±adimos elementos al vector usando useState (tenemos que usar useState obligatoriamente)\r\n    } */\r\n\r\n    return (\r\n        <>\r\n           \r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n\r\n            <AddCategory setCategories={setCategories} />     {/* pasamos una funcion esta vez */}\r\n\r\n            <ol>\r\n                {\r\n                    // el key no puede ser el indice y tiene que ser unico\r\n                    // categories.map(category => {\r\n                    // return <li key={category}> {category} </li>    aqui no podemos ejecutar un bucle for, por eso usamos el metodo map\r\n                   //  })                                              cuando usamos {} tenemos que devolver un objeto, por eso for no sirve\r\n                    \r\n                   categories.map(category => (\r\n                        <GifGrid key={category} category={category} />\r\n                   ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default GifExpertApp; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}